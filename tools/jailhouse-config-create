#!/usr/bin/env python
#
# Jailhouse, a Linux-based partitioning hypervisor
#
# Copyright (c) Siemens AG, 2014
#
# This work is licensed under the terms of the GNU GPL, version 2.  See
# the COPYING file in the top-level directory.
#
# This script should help to create a basic jailhouse configuration file.
# It needs to be executed on the target machine, where it will gather
# information about the system. For more advanced scenarios you will have
# to change the generated C-code.

from __future__ import print_function
import sys
import os
import re
import argparse
import struct
from mako.template import Template

abspath = os.path.abspath(os.path.dirname(sys.argv[0]))

# pretend to be part of the jailhouse tool
sys.argv[0] = sys.argv[0].replace('-', ' ')

parser = argparse.ArgumentParser()
parser.add_argument('-g', '--generate-collector',
                    help='generate a script to collect input files on '
                         'a remote machine',
                    action='store_true')
parser.add_argument('-r', '--root',
                    help='gather information in ROOT/, the default is "/" '
                         'which means creating a config for localhost',
                    default='/',
                    action='store',
                    type=str)
parser.add_argument('-t', '--template-dir',
                    help='the directory where the templates are located,'
                         'the default is "' + abspath + '"',
                    default=abspath,
                    action='store',
                    type=str)

memargs = [['--mem-inmates', '2M', 'inmate'],
           ['--mem-hv', '64M', 'hypervisor']]

for entry in memargs:
    parser.add_argument(entry[0],
                        help='the amount of ' + entry[2] +
                             ' memory, default is "' + entry[1] +
                             '", format "xxx[K|M|G]"',
                        default=entry[1],
                        action='store',
                        type=str)

parser.add_argument('file', metavar='FILE',
                    help='name of file to write out',
                    type=str)

options = parser.parse_args()

inputs = {'files': set(), 'files_opt': set(), 'dirs': set()}


class PCICapability:
    def __init__(self, id, start, len, flags):
        self.id = id
        self.start = start
        self.len = len
        self.flags = flags
        self.comments = []

    def __eq__(self, other):
        return self.id == other.id and self.start == other.start and \
            self.len == other.len and self.flags == other.flags

    RD = '0'
    RW = 'JAILHOUSE_PCICAPS_WRITE'

    @staticmethod
    def parse_pcicaps(dir):
        caps = []
        f = input_open(os.path.join(dir, 'config'), 'rb')
        f.seek(0x06)
        (status,) = struct.unpack('<H', f.read(2))
        # capability list supported?
        if (status & (1 << 4)) == 0:
            f.close()
            return caps
        # walk capability list
        f.seek(0x34)
        (next,) = struct.unpack('B', f.read(1))
        while next != 0:
            cap = next
            f.seek(cap)
            (id, next) = struct.unpack('<BB', f.read(2))
            if id == 0x01:  # Power Management
                # this cap can be handed out completely
                len = 8
                flags = PCICapability.RW
            elif id == 0x05:  # MSI
                # access will be moderated by hypervisor
                len = 10
                (msgctl,) = struct.unpack('<H', f.read(2))
                if (msgctl & (1 << 7)) != 0:  # 64-bit support
                    len += 4
                if (msgctl & (1 << 8)) != 0:  # per-vector masking support
                    len += 10
                flags = PCICapability.RW
            elif id == 0x11:  # MSI-X
                # access will be moderated by hypervisor
                len = 12
                flags = PCICapability.RW
            else:
                # unknown/unhandled cap, mark its existence
                len = 2
                flags = PCICapability.RD
            caps.append(PCICapability(id, cap, len, flags))
        return caps


class PCIDevice:
    def __init__(self, type, domain, bus, dev, fn, caps):
        self.type = type
        self.domain = domain
        self.bus = bus
        self.dev = dev
        self.fn = fn
        self.caps = caps
        self.caps_start = 0
        self.num_caps = len(caps)

    def __str__(self):
        return 'PCIDevice: %02x:%02x.%x' % (self.bus, self.dev, self.fn)

    def bdf(self):
        return self.bus << 8 | self.dev << 3 | self.fn

    @staticmethod
    def parse_pcidevice_sysfsdir(basedir, dir):
        dpath = os.path.join(basedir, dir)
        dclass = input_readline(os.path.join(dpath, 'class'))
        if re.match(r'0x0604..', dclass):
            type = 'JAILHOUSE_PCI_TYPE_BRIDGE'
        else:
            type = 'JAILHOUSE_PCI_TYPE_DEVICE'
        a = dir.split(':')
        domain = int(a[0], 16)
        bus = int(a[1], 16)
        df = a[2].split('.')
        caps = PCICapability.parse_pcicaps(dpath)
        return PCIDevice(type, domain, bus, int(df[0], 16), int(df[1], 16),
                         caps)


class MemRegion:
    def __init__(self, start, stop, typestr, comments=[]):
        self.start = start
        self.stop = stop
        self.typestr = typestr
        self.comments = comments

    def __str__(self):
        return 'MemRegion: %08x-%08x : %s' % \
            (self.start, self.stop, self.typestr)

    def size(self):
        # round up to full PAGE_SIZE
        return int((self.stop - self.start + 0xfff) / 0x1000) * 0x1000

    def flagstr(self, p=''):
        if (
            self.typestr == 'ACPI Tables' or
            self.typestr == 'ACPI Non-volatile Storage'
        ):
            return 'JAILHOUSE_MEM_READ'
        if (
            self.typestr == 'System RAM' or
            self.typestr == 'RAM buffer' or
            self.typestr == 'ACPI DMAR RMRR'
        ):
            s = 'JAILHOUSE_MEM_READ | JAILHOUSE_MEM_WRITE |\n'
            s += p + '\t\tJAILHOUSE_MEM_EXECUTE | JAILHOUSE_MEM_DMA'
            return s
        return 'JAILHOUSE_MEM_READ | JAILHOUSE_MEM_WRITE'

    @staticmethod
    # return the first region with the given typestr
    def find_region(regions, typestr):
        for r in regions:
            if (r.typestr == typestr):
                return r
        return None

    @staticmethod
    def parse_iomem_line(line):
        a = line.split(':', 1)
        # HPET may be part of in reserved region
        if a[0].startswith(' ') and a[1].find("HPET") < 0:
            return None
        region = a[0].split('-', 1)
        a[1] = a[1].strip()
        return MemRegion(int(region[0], 16), int(region[1], 16), a[1])


def parse_iomem():
    regions = []
    f = input_open('/proc/iomem')
    for line in f:
        r = MemRegion.parse_iomem_line(line)
        ## XXX what else to ignore??
        if (
            r is not None and
            r.typestr != 'Local APIC' and
            r.typestr != 'reserved'
        ):
            regions.append(r)
    f.close()

    # newer Linux kernels will report the first page as reserved
    # it is needed for CPU init so include it anyways
    if (
        regions[0].typestr == 'System RAM' and
        regions[0].start == 0x1000
    ):
        regions[0].start = 0

    return regions


def parse_pcidevices():
    devices = []
    caps = []
    basedir = '/sys/bus/pci/devices'
    list = input_listdir(basedir, ['*/class', '*/config'])
    for dir in list:
        d = PCIDevice.parse_pcidevice_sysfsdir(basedir, dir)
        if d is not None:
            if len(d.caps) > 0:
                duplicate = False
                # look for duplicate capability patterns
                for d2 in devices:
                    if d2.caps == d.caps:
                        # reused existing capability list, but record all users
                        d2.caps[0].comments.append(str(d))
                        d.caps_start = d2.caps_start
                        duplicate = True
                        break
                if not duplicate:
                    d.caps[0].comments.append(str(d))
                    d.caps_start = len(caps)
                    caps.extend(d.caps)
            devices.append(d)
    return (devices, caps)


def kmg_multiply(value, kmg):
    if (kmg == 'K' or kmg == 'k'):
        return 1024 * value
    if (kmg == 'M' or kmg == 'm'):
        return 1024**2 * value
    if (kmg == 'G' or kmg == 'g'):
        return 1024**3 * value
    return value


def kmg_multiply_str(str):
    m = re.match(r'([0-9a-fA-FxX]+)([KMG]?)', str)
    if m is not None:
        return kmg_multiply(int(m.group(1)), m.group(2))
    raise RuntimeError('kmg_multiply_str can not parse input "' + str + '"')
    return 0


def input_open(name, mode='r', optional=False):
    inputs['files_opt' if optional else 'files'].add(name)
    try:
        f = open(options.root + name, mode)
    except Exception as e:
        if optional or options.generate_collector:
            return open("/dev/null", mode)
        raise e
    return f


def input_readline(name, optional=False):
    f = input_open(name, optional=optional)
    line = f.readline()
    f.close()
    return line


def input_listdir(dir, wildcards):
    for w in wildcards:
        inputs['dirs'].add(os.path.join(dir, w))
    if options.generate_collector:
        return []
    dirs = os.listdir(options.root + dir)
    dirs.sort()
    return dirs


def parse_cmdline():
    line = input_readline('/proc/cmdline')
    m = re.match(r'.*memmap=([0-9a-fA-FxX]+)([KMG]?)\$'
                 '([0-9a-fA-FxX]+)([KMG]?).*',
                 line)
    if m is not None:
        size = kmg_multiply(int(m.group(1), 0), m.group(2))
        start = kmg_multiply(int(m.group(3), 0), m.group(4))
        return [start, size]
    return None


def alloc_mem(regions, size):
    mem = [0, size]
    for r in reversed(regions):
        if (r.typestr == 'System RAM' and r.size() >= mem[1]):
            mem[0] = r.start
            r.start += mem[1]
            return mem
    raise RuntimeError('failed to allocate memory')


def count_cpus():
    list = input_listdir('/sys/devices/system/cpu', ['cpu*/uevent'])
    count = 0
    for f in list:
        if re.match(r'cpu[0-9]+', f):
            count += 1
    return count


def parse_dmar_devscope(f):
    offset = 0
    (scope_type, scope_len, bus, dev, fn) = \
        struct.unpack('<BBxxxBBB', f.read(8))
    offset += 8
    return (offset, scope_type, scope_len, bus, dev, fn)


# parsing of DMAR ACPI Table
# see Intel VT-d Spec chapter 8
def parse_dmar():
    f = input_open('/sys/firmware/acpi/tables/DMAR', 'rb', True)
    if get_cpu_vendor() == 'AuthenticAMD':
        print('WARNING: AMD IOMMU support is not implemented yet')
        return [], 0, []
    signature = f.read(4)
    if signature != b'DMAR':
        if options.generate_collector:
            return [], 0, []
        raise RuntimeError('incorrect input file format %s' % signature)
    (length,) = struct.unpack('<I', f.read(4))
    f.seek(48)
    length -= 48
    units = []
    regions = []
    ioapic_id = 0

    while length > 0:
        offset = 0
        (struct_type, struct_len) = struct.unpack('<HH', f.read(4))
        offset += 4
        length -= struct_len

        # DMA Remapping Hardware Unit Definition
        if struct_type == 0:
            (segment, base) = struct.unpack('<xxHQ', f.read(12))
            if segment != 0:
                raise RuntimeError('We do not support multiple PCI segments')
            if len(units) >= 8:
                raise RuntimeError('Too many DMAR units. '
                                   'Raise JAILHOUSE_MAX_DMAR_UNITS.')
            units.append(base)
            offset += 16 - offset
            while offset < struct_len:
                (off, scope_type, scope_len, bus, dev, fn) =\
                    parse_dmar_devscope(f)
                offset += off
                if scope_type == 3:
                    if ioapic_id != 0:
                        raise RuntimeError('We do not support more '
                                           'than 1 IOAPIC')
                    ioapic_id = (bus << 8) | (dev << 3) | fn
                f.seek(scope_len - 8, os.SEEK_CUR)
                offset += scope_len - 8

        # Reserved Memory Region Reporting Structure
        if struct_type == 1:
            f.seek(8 - offset, os.SEEK_CUR)
            offset += 8 - offset
            (base, limit) = struct.unpack('<QQ', f.read(16))
            offset += 16

            comments = []
            while offset < struct_len:
                (off, scope_type, scope_len, bus, dev, fn) =\
                    parse_dmar_devscope(f)
                offset += off
                npath = (scope_len - 6)/2
                if scope_type == 1 and npath == 1:
                    comments.append('PCI device: %02x:%02x.%x' %
                                    (bus, dev, fn))
                else:
                    comments.append('DMAR parser could not decode device path')
                f.seek(scope_len - off, os.SEEK_CUR)
                offset += scope_len - off

            reg = MemRegion(base, limit, 'ACPI DMAR RMRR', comments)
            regions.append(reg)

        f.seek(struct_len - offset, os.SEEK_CUR)

    return units, ioapic_id, regions


def parse_ioports():
    pm_timer_base = None
    f = input_open('/proc/ioports')
    for line in f:
        if line.endswith('ACPI PM_TMR\n'):
            pm_timer_base = int(line.split('-')[0], 16)
            break
    f.close()
    return pm_timer_base


class MMConfig:
    def __init__(self, base, end_bus):
        self.base = base
        self.end_bus = end_bus

    @staticmethod
    def parse():
        f = input_open('/sys/firmware/acpi/tables/MCFG', 'rb')
        signature = f.read(4)
        if signature != b'MCFG':
            if options.generate_collector:
                return MMConfig(0, 0)
            raise RuntimeError('incorrect input file format %s' % signature)
        (length,) = struct.unpack('<I', f.read(4))
        if length > 60:
            raise RuntimeError('Multiple MMCONFIG regions found! '
                               'This is not supported')
        f.seek(44)
        (base, segment, start_bus, end_bus) = \
            struct.unpack('<QHBB', f.read(12))
        if segment != 0 or start_bus != 0:
            raise RuntimeError('Invalid MCFG structure found')
        return MMConfig(base, end_bus)


def get_cpu_vendor():
    with input_open('/proc/cpuinfo', 'r') as f:
        for line in f:
            if not line.strip():
                continue
            key, value = line.split(':')
            if key.strip() == 'vendor_id':
                return value.strip()


(pcidevices, pcicaps) = parse_pcidevices()

product = [input_readline('/sys/class/dmi/id/sys_vendor',
                          True).rstrip(),
           input_readline('/sys/class/dmi/id/product_name',
                          True).rstrip()
           ]

inmatemem = kmg_multiply_str(options.mem_inmates)
hvmem = [0, kmg_multiply_str(options.mem_hv)]

regions = parse_iomem()
ourmem = parse_cmdline()
total = hvmem[1] + inmatemem

mmconfig = MMConfig.parse()

(dmar_units, ioapic_id, rmrr_regs) = parse_dmar()
regions += rmrr_regs

# kernel does not have memmap region, pick one
if ourmem is None:
    ourmem = alloc_mem(regions, total)
elif (total > ourmem[1]):
    raise RuntimeError('Your memmap reservation is too small you need >="' +
                       hex(total) + '"')

hvmem[0] = ourmem[0]

inmatereg = MemRegion(ourmem[0] + hvmem[1],
                      ourmem[0] + hvmem[1] + inmatemem - 1,
                      'JAILHOUSE Inmate Memory')
regions.append(inmatereg)

cpucount = count_cpus()

pm_timer_base = parse_ioports()

jh_enabled = input_readline('/sys/devices/jailhouse/enabled',
                            True).rstrip()
if options.generate_collector is False and jh_enabled == '1':
    print('ERROR: Jailhouse was enabled when collecting input files! '
          'Disable jailhouse and try again.',
          file=sys.stderr)
    sys.exit(1)

f = open(options.file, 'w')

if options.generate_collector:
    filelist = ' '.join(inputs['files'].union(inputs['dirs']))
    filelist_opt = ' '.join(inputs['files_opt'])

    tmpl = Template(filename=os.path.join(options.template_dir,
                                          'jailhouse-config-collect.tmpl'))
    f.write(tmpl.render(filelist=filelist, filelist_opt=filelist_opt))
else:
    tmpl = Template(filename=os.path.join(options.template_dir,
                                          'root-cell-config.c.tmpl'))
    f.write(tmpl.render(regions=regions,
                        ourmem=ourmem,
                        argstr=' '.join(sys.argv),
                        hvmem=hvmem,
                        product=product,
                        pcidevices=pcidevices,
                        pcicaps=pcicaps,
                        cpucount=cpucount,
                        ioapic_id=ioapic_id,
                        pm_timer_base=pm_timer_base,
                        mmconfig=mmconfig,
                        dmar_units=dmar_units))

f.close()
